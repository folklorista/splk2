# Change this depending on environment
upstream splk-api {
	server 127.0.0.1:3001;
	keepalive 120;
}

server {
	listen 80;
	server_name splk.folklorista.cz splk2.test;
	root /var/www/splk2/frontend/dist/splk2;
	index index.html index.htm;
	include /etc/nginx/mime.types;
	charset utf-8;
	add_header "X-UA-Compatible" "IE=Edge,chrome=1";

	gzip on;
	error_log /var/www/splk2/log/frontend/error.log warn;
	access_log /var/www/splk2/log/frontend/access.log combined;
#	error_log off; 
#	access_log off;

	# /api will server your proxied API that is running on same machine different port
	# or another machine. So you can protect your API endpoint not get hit by public directly

	location ^~ /api {
		rewrite ^/api/(.*)$ /$1 break;
		proxy_pass http://splk-api;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection 'upgrade';
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_cache_bypass $http_upgrade;
	}

	location ^~ /files {
		expires -1;
		add_header Pragma "no-cache";
		root /var/www/splk;
		try_files $uri $uri/ /index.html;
		break;
	}

	location /error.html {
		root /var/www/splk2/frontend;
		ssi on;
		internal;
		auth_basic off;
		try_files $uri /error.html;
	}

	location / {
		expires -1;
		add_header Pragma "no-cache";
		try_files $uri $uri/ /index.html /error.html;
		break;
	}

	location = /favicon.ico {
		root /var/www/splk2/frontend;
	}

	# Static File Caching. All static files with the following extension will be cached for 1 day
	location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
		expires 1d;
	}

	error_page 404 /404.php;
}

server {
	listen 3001;
	root /var/www/splk2/api/;
	index index.php;
	charset utf-8;

	gzip on;
	error_log /var/www/splk2/log/api/error.log warn;
	access_log /var/www/splk2/log/api/access.log combined;

	location ~* ^[^\?\&]+\.(html|jpg|jpeg|json|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js|svg|woff|ttf)$ {
		# First attempt to serve request as file, then
		# as directory, then fall back to index.php
		try_files $uri $uri/ /index.php?$args;
		#try_files /favicon.ico =404;
	}

	error_page 404 /index.php;

location / {
    try_files $uri $uri/ /index.php?$query_string;
}

	# Konfigurace pro zpracování PHP skriptů
	location ~ \.php$ {
		#include snippets/fastcgi-php.conf;

# regex to split $uri to $fastcgi_script_name and $fastcgi_path
fastcgi_split_path_info ^(.+?\.php)(/.*)$;

# Check that the PHP script exists before passing it
#try_files $fastcgi_script_name =404;
		try_files /index.php =404;

# Bypass the fact that try_files resets $fastcgi_path_info
# see: http://trac.nginx.org/nginx/ticket/321
set $path_info $fastcgi_path_info;
fastcgi_param PATH_INFO $path_info;

fastcgi_index index.php;
include fastcgi.conf;


		fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;  # Sock pro PHP-FPM
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		include fastcgi_params;
	}

	location ~ \.php7$ {
		add_header X-Is-PHP true;
		#try_files $uri =404;
		try_files /index.php =404;
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
		#fastcgi_index /index.php;
		fastcgi_index index.php;
		#include fastcgi.conf;
		include fastcgi_params;
		#fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_param PATH_INFO $fastcgi_path_info;
		fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param QUERY_STRING $args;
		fastcgi_param REMOTE_ADDR $http_x_real_ip;
		fastcgi_param APPLICATION_ENV development; # set to 'development' or 'production'
	}

	location ~ /\.ht {
		deny all;
	}
}